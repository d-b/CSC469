#!/usr/bin/env python3
#
# CSC469 - Performance Evaluation
#
# Daniel Bloemendal <d.bloemendal@gmail.com>
#

# Experiment settings
EXPERIMENT_SAMPLES   = 50
EXPERIMENT_THRESHOLD = 20000

# Python imports
import os
import getopt
import json
import subprocess

# Get paths
SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
BIN_PATH    = os.path.join(SCRIPT_PATH, 'bin')
SETUP_PATH  = os.path.join(SCRIPT_PATH, 'setup')
PRESNT_PATH = os.path.join(SCRIPT_PATH, 'present2')
DOC_PATH    = os.path.join(SCRIPT_PATH, 'doc')
DATA1_PATH  = os.path.join(DOC_PATH, 'part2.1.json')
DATA2_PATH  = os.path.join(DOC_PATH, 'part2.2.json')
PLOT_PATH   = os.path.join(DOC_PATH, 'part2.eps')
APP_PATH    = os.path.join(BIN_PATH, 'perftest')

# Plotting settings
BAR_BOTTOM  = 0.35
BAR_HEIGHT  = 1.5
PLOT_HEIGHT = 4.5

def build():
    if(not os.path.isfile(APP_PATH)):
        os.system('bash -c "{}"'.format(SETUP_PATH))
        if(not os.path.isfile(APP_PATH)):
            raise Exception('build failed')

def reconcile(data1, data2):
    # Find first and second process
    first, second = (data1, data2) if(data1['start'] < data2['start']) else (data2, data1)
    # Eliminate samples that occur before the second process starts
    first['samples'] = [x for x in first['samples'] if x['start'] >= second['samples'][0]['start']]
    try: first['start'] = first['samples'][0]['start']
    except: first['start'] = second['samples'][0]['start']
    # Find first and second process
    first, second = (data1, data2) if(data1['start'] < data2['start']) else (data2, data1)
    # Normalize data
    start = first['start']
    for dat in [data1, data2]:
        dat['start'] -= start
        for sample in dat['samples']:
            sample['start'] -= start
            sample['end'] -= start
    # Bail out if there is nothing left in one of the lists
    if(not first['samples'] or not second['samples']): return
    # Find out which process ends first
    shorter, longer = (data1, data2) if(data1['samples'][-1]['end']
                                      < data2['samples'][-1]['end']) else (data2, data1)
    # Eliminate extraneous samples from longer process
    longer['samples'] = [x for x in longer['samples'] if x['end'] <= shorter['samples'][-1]['end']]

def run_experiment(samples, threshold):
    outputs = [DATA1_PATH, DATA2_PATH]
    arguments = ['-s -f -n {} -t {} -o {}'.format(
        samples, threshold, outputs[i]).split() for i in range(2)]
    instances = [subprocess.Popen([APP_PATH] + arguments[i],
        stdin=subprocess.PIPE, stdout=subprocess.PIPE) for i in range(2)]
    for x in instances: x.wait()
    return [json.load(open(o)) for o in outputs]

def analyze(data):
    # Calculate scaling factor
    factor = (1/data[0]['frequency'])*1e+3
    # Process list
    processes = []
    # Build period sequences
    for proc in data:
        sequence = []
        active = {'start': proc['start'], 'end': proc['start'], 'active': True}
        for sample in proc['samples']:
            active['end'] = sample['start']
            sequence.append(dict(active))
            inactive = dict(sample)
            inactive['active'] = False
            sequence.append(inactive)
            active['start'] = inactive['end']
        processes.append(sequence)
    # Bail out if necessary
    if(not all(processes)): return
    # Look for context switches
    first, second = processes[:2] if(data[0]['start']
                                   < data[1]['start']) else list(reversed(processes))[:2]
    iother = iter(first)
    for sample in second:
        while(True):
            try: other = next(iother)
            except: break
            if(sample['end'] > other['start']): continue
            if(not other['active']): break
            start = sample['end']
            duration = other['start'] - sample['end']
            print('Context switch at: {:5f} ms (Duration: {:5f} ms)'.format(
                start*factor, duration*factor))
            break

def generate_plot(data):
    # Start gnuplot process
    process = subprocess.Popen(['gnuplot'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

    # Write header
    code = """# Part1 plot
set output "{}"
set term postscript eps 10
set title "Process 1 & 2"
set xlabel "Time (ms)"
set key below
set border 3
set xtics nomirror
set noytics
set size 1.15, 0.5
""".format(PLOT_PATH)
    process.stdin.write(code.encode('utf8'))

    # Compute plot width
    factor = (1/data[0]['frequency'])*1e+3
    max_end = max([x['end'] for x in (data[0]['samples'] + data[1]['samples'])])
    max_end *= factor

    def plot(data, index, top):
        # Colors
        colors = [['blue', 'red'], ['royalblue', 'orange']]

        # Get start
        start = data['start']*factor

        # Scale the samples
        samples = [{'start': sample['start']*factor,
                    'end'  : sample['end'  ]*factor} for sample in data['samples']]

        # Write the samples
        active = {'start': start, 'end': start}
        for i, inactive in enumerate(samples):
            active['end'] = inactive['start']
            for j, sample, color in [(0, active, colors[index][0]),
                                     (1, inactive, colors[index][1])]:
                objnum = (index*len(samples)*2) + (i*2 + j + 1)
                code = 'set object {} rect from {}, {} to {}, {}, 2 fc rgb "{}" fs solid\n'.format(
                    objnum,
                    sample['start'], top + BAR_BOTTOM,
                    sample['end'], top + BAR_BOTTOM + BAR_HEIGHT,
                    color)
                process.stdin.write(code.encode('utf8'))
            active['start'] = inactive['end']

    # Plot both processes
    plot(data[0], 0, BAR_HEIGHT)
    plot(data[1], 1, 0)
    code = ('plot [0:{}] [0:{}]' +
            '0 lt 1 lc rgb "blue" title "P1 - Active", ' +
            '0 lt 1 lc rgb "red" title "P1 - Inactive", ' +
            '0 lt 1 lc rgb "royalblue" title "P2 - Active", ' +
            '0 lt 1 lc rgb "orange" title "P2 - Inactive"\n').format(max_end, PLOT_HEIGHT)
    process.stdin.write(code.encode('utf8'))

    # Cleanup
    process.stdin.close()
    process.wait()

def present():
    os.system('bash -c "{}"'.format(PRESNT_PATH))

def main(arguments):
    ''' main program '''
    # Set defaults
    experiment_samples   = EXPERIMENT_SAMPLES
    experiment_threshold = EXPERIMENT_THRESHOLD

    # Parse arguments
    def abort(message = None):
        from sys import exit
        if(message): print(message)
        print('Usage: {} [-n <samples>] [-t <threshold>]'.format(arguments[0]))
        exit(-1)
    try:
        opts, args = getopt.getopt(arguments[1:], "n:t:", ["samples=", "threshold="])
    except getopt.GetoptError as err:
        abort(str(err))
    for o, a in opts:
        if   o in ("-n", '--samples'):
            try: experiment_samples = int(a)
            except: abort('The number of samples should be a positive integer.')
            if(experiment_samples <= 0):
                abort('The number of samples must be an integer value greater than zero.')
        elif o in ("-t", "--threshold"):
            try: experiment_threshold = int(a)
            except: abort('The threshold value should be a positive integer.')
            if(experiment_threshold <= 0):
                abort('The threshold value must be an integer value greater than zero.')
        else: abort()

    # Sanity check on samples
    if(not experiment_samples):
        return

    # Build project if not yet built
    build()

    # Collect some data
    data = run_experiment(
        experiment_samples,
        experiment_threshold)
    # Reconcile data sets
    reconcile(data[0], data[1])

    # Analyze the data
    analyze(data)

    # Generate the plot and present it
    generate_plot(data)
    present()

# Entry point
if __name__ == '__main__':
    from sys import argv
    main(argv)
