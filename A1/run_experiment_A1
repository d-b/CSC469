#!/usr/bin/env python3
#
# CSC469 - Performance Evaluation
#
# Daniel Bloemendal <d.bloemendal@gmail.com>
#

# Experiment settings
EXPERIMENT_SAMPLES   = 50
EXPERIMENT_THRESHOLD = 2500

# Python imports
import os
import getopt
import json
import subprocess

# Get paths
SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
BIN_PATH    = os.path.join(SCRIPT_PATH, 'bin')
SETUP_PATH  = os.path.join(SCRIPT_PATH, 'setup')
PRESNT_PATH = os.path.join(SCRIPT_PATH, 'present1')
DOC_PATH    = os.path.join(SCRIPT_PATH, 'doc')
DATA_PATH   = os.path.join(DOC_PATH, 'part1.json')
PLOT_PATH   = os.path.join(DOC_PATH, 'part1.eps')
APP_PATH    = os.path.join(BIN_PATH, 'perftest')

# Plotting settings
BAR_BOTTOM  = 0.35
BAR_HEIGHT  = 1.5
PLOT_HEIGHT = 3

def build():
    if(not os.path.isfile(APP_PATH)):
        os.system('bash -c "{}"'.format(SETUP_PATH))
        if(not os.path.isfile(APP_PATH)):
            raise Exception('build failed')

def run_experiment(samples, threshold):
    os.system('bash -c "{} -n {} -t {} -o {}"'.format(
        APP_PATH, int(samples), int(threshold), DATA_PATH))
    return json.load(open(DATA_PATH))

def generate_plot(data):
    # Start gnuplot process
    process = subprocess.Popen(['gnuplot'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

    # Write header
    code = """# Part1 plot
set title "Active and Inactive Periods"
set xlabel "Time (ms)"
set key below
set border 3
set xtics nomirror
set noytics
set term postscript eps 10
set size 1.15,0.5
set output "{}"
""".format(PLOT_PATH)
    process.stdin.write(code.encode('utf8'))

    # Scaling factor
    factor = (1/data['frequency'])*1e+3

    # Get start
    start = data['start']*factor

    # Scale the samples
    samples = [{'start': sample['start']*factor,
                'end'  : sample['end'  ]*factor} for sample in data['samples']]

    # Compute the max end
    max_end = max([x['end'] for x in samples])

    # Write the samples
    active = {'start': start, 'end': start}
    for i, inactive in enumerate(samples):
        active['end'] = inactive['start']
        for j, sample, color in [(0, active, 'blue'), (1, inactive, 'red')]:
            code = 'set object {} rect from {}, {} to {}, {}, 2 fc rgb "{}" fs solid\n'.format(
                i*2 + j + 1,
                sample['start'], BAR_BOTTOM,
                sample['end'], BAR_BOTTOM + BAR_HEIGHT,
                color)
            process.stdin.write(code.encode('utf8'))
        active['start'] = inactive['end']

    # Render the plot
    code = ('plot [0:{}] [0:{}] 0 lt 1 lc rgb "blue" title "Active", ' + \
            '0 lt 1 lc rgb "red" title "Inactive"\n').format(max_end, PLOT_HEIGHT)
    process.stdin.write(code.encode('utf8'))

    # Cleanup
    process.stdin.close()
    process.wait()

def present():
    os.system('bash -c "{}"'.format(PRESNT_PATH))

def main(arguments):
    ''' main program '''
    # Build project if not yet built
    build()

    # Set defaults
    experiment_samples   = EXPERIMENT_SAMPLES
    experiment_threshold = EXPERIMENT_THRESHOLD

    # Parse arguments
    def usage():
        print('Usage: {} [-n <samples>] [-t <threshold>]'.format(arguments[0]))
    try:
        opts, args = getopt.getopt(arguments[1:], "n:t:", ["samples=", "threshold="])
    except getopt.GetoptError as err:
        print(str(err))
        usage()
        return
    for o, a in opts:
        if   o in ("-n", '--samples'):
            try: experiment_samples = int(a)
            except:
                print('Invalid value for samples!')
                usage()
                return
        elif o in ("-t", "--threshold"):
            try: experiment_threshold = int(a)
            except:
                print('Invalid value for threshold!')
                usage()
                return
        else:
            usage()
            return

    # Sanity check on samples
    if(not experiment_samples):
        return

    # Collect some data
    data = run_experiment(
        experiment_samples,
        experiment_threshold)
    generate_plot(data)

    # Present the results
    present()

# Entry point
if __name__ == '__main__':
    from sys import argv
    main(argv)
